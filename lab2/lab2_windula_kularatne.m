%% 1. Raw EEG and activities in different bands.

data = load("data_2.mat");
t= data.t;
signal = data.signal;
Fs = data.Fs

% plot raw eeg signal
subplot(5,1,1);
plot(t,signal)
title('Raw EEG signal');
xlabel('Time');
ylabel('Amplitude');
[up,lo] = envelope(signal,30*Fs,'rms');
hold on
plot(t,up,t,lo,'linewidth',1.5)
set(gca,'ylim',[-0.03 0.03])
legend('signal','up','lo')
hold off

% plot delta eeg signal
subplot(5,1,2); 
filterd_delta = filter(delta_filter,signal)
plot(t,filterd_delta)
title('delta EEG signal');
% xlabel('Time');
ylabel('Amplitude');
[up,lo] = envelope(filterd_delta,30*Fs,'rms');
hold on
plot(t,up,t,lo,'linewidth',1.5)
set(gca,'ylim',[-0.03 0.03])
legend('Delta','up','lo')
hold off

% plot theta eeg signal
subplot(5,1,3); 
filterd_theta = filter(theta_filter,signal)
plot(t,filterd_theta)
title('theta EEG signal');
xlabel('Time');
ylabel('Amplitude');
[up,lo] = envelope(filterd_theta,30*Fs,'rms');
hold on
plot(t,up,t,lo,'linewidth',1.5)
set(gca,'ylim',[-0.03 0.03])
legend('Theta','up','lo')
hold off

% plot beta eeg signal
subplot(5,1,4); 
filterd_beta = filter(beta_filter,signal)
plot(t,filterd_beta)
title('beta EEG signal');
xlabel('Time');
ylabel('Amplitude');
[up,lo] = envelope(filterd_beta,30*Fs,'rms');
hold on
plot(t,up,t,lo,'linewidth',1.5)
set(gca,'ylim',[-0.03 0.03])
legend('Beta','up','lo')
hold off

% alpha raw eeg signal
subplot(5,1,5); 
filterd_alpha = filter(alpha_filter,signal)
plot(t,filterd_alpha)
title('alpha EEG signal');
xlabel('Time');
ylabel('Amplitude');
[up,lo] = envelope(filterd_alpha,30*Fs,'rms');
hold on
plot(t,up,t,lo,'linewidth',1.5)
set(gca,'ylim',[-0.03 0.03])
legend('Alpha','up','lo')
hold off

%% 2. Spectrogram and relative powers

window = 30 * Fs;
overlap = 29 * Fs;
f = [0.1:0.1:32];
t = 0:1/Fs:10-1/Fs;
[S,F,T,P] = spectrogram(signal,window,overlap,f,Fs);

% Calculate the relative powers
delta_range = [1, 4];
theta_range = [4, 8];
alpha_range = [8, 12];
beta_range = [12, 25];

delta_idx = find(F >= delta_range(1) & F <= delta_range(2));
theta_idx = find(F >= theta_range(1) & F <= theta_range(2));
alpha_idx = find(F >= alpha_range(1) & F <= alpha_range(2));
beta_idx = find(F >= beta_range(1) & F <= beta_range(2));

P_total = sum(P);
delta_power = sum(P(delta_idx, :)) ./ P_total;
theta_power = sum(P(theta_idx, :)) ./ P_total;
alpha_power = sum(P(alpha_idx, :)) ./ P_total;
beta_power = sum(P(beta_idx, :)) ./ P_total;


figure;

% Plot the power spectral density estimates
subplot(3, 1, 1);
imagesc(T/60, F, log10(P), [-7 -3]);
axis xy;
xlabel('Time (min)');
ylabel('Frequency');
title('Power Spectral Density Estimates');

% Plot the relative powers
subplot(3, 1, 2);
hold on;
plot(T/60, delta_power, 'b');
plot(T/60, theta_power, 'r');
plot(T/60, alpha_power, 'g');
plot(T/60, beta_power, 'm');
hold off;
xlabel('Time (min)');
ylabel('Relative Power');
ylim([0, 1]);
legend('Delta', 'Theta', 'Alpha', 'Beta');
title('Relative Powers');



%% Spectral entropy

fl = 0.1;
fh = 32;
idx = find(F >= fl & F <= fh);
SE = zeros(1, size(P, 2));

for t = 1:size(P, 2)
    P_norm = P(idx, t) / sum(P(idx, t)); % Normalize 
    SE(t) = -sum(P_norm .* log2(P_norm)); % Calculate spectral entropy
end

figure;

% Plot the power spectral density estimates
subplot(3, 1, 1);
imagesc(T/60, F, log10(P), [-7 -3]);
axis xy;
xlabel('Time (min)');
ylabel('Frequency');
title('Power Spectral Density Estimates');

% Plot the relative powers
subplot(3, 1, 2);
hold on;
plot(T/60, delta_power, 'b');
plot(T/60, theta_power, 'r');
plot(T/60, alpha_power, 'g');
plot(T/60, beta_power, 'm');
hold off;
xlabel('Time (min)');
ylabel('Relative Power');
ylim([0, 1]);
legend('Delta', 'Theta', 'Alpha', 'Beta');
title('Relative Powers');

% Plot the relative powers
subplot(3, 1, 3);
plot(T/60, SE, 'k');
xlabel('Time (min)');
ylabel('Spectral Entropy');
title('Spectral Entropy');


%% Filters


function Hd = alpha_filter
%ALPHA_FILTER Returns a discrete-Time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.13 and DSP System Toolbox 9.15.
% Generated on: 29-Mar-2023 14:09:31

% FIR Window Bandpass filter designed using the FIR1 function.

% All frequency values are in Hz.
Fs = 200;  % Sampling Frequency

N    = 800;      % Order
Fc1  = 8;        % First Cutoff Frequency
Fc2  = 12;       % Second Cutoff Frequency
flag = 'scale';  % Sampling Flag
% Create the window vector for the design algorithm.
win = hamming(N+1);

% Calculate the coefficients using the FIR1 function.
b  = fir1(N, [Fc1 Fc2]/(Fs/2), 'bandpass', win, flag);
Hd = dfilt.dffir(b);

% [EOF]


function Hd = beta_filter
%BETA_FILTER Returns a discrete-Time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.13 and DSP System Toolbox 9.15.
% Generated on: 29-Mar-2023 14:09:54

% FIR Window Bandpass filter designed using the FIR1 function.

% All frequency values are in Hz.
Fs = 200;  % Sampling Frequency

N    = 800;      % Order
Fc1  = 12;       % First Cutoff Frequency
Fc2  = 16;       % Second Cutoff Frequency
flag = 'scale';  % Sampling Flag
% Create the window vector for the design algorithm.
win = hamming(N+1);

% Calculate the coefficients using the FIR1 function.
b  = fir1(N, [Fc1 Fc2]/(Fs/2), 'bandpass', win, flag);
Hd = dfilt.dffir(b);

% [EOF]



function Hd = delta_filter
%DELTA_FILTER Returns a discrete-Time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.13 and DSP System Toolbox 9.15.
% Generated on: 29-Mar-2023 14:06:48

% FIR Window Bandpass filter designed using the FIR1 function.

% All frequency values are in Hz.
Fs = 200;  % Sampling Frequency

N    = 800;      % Order
Fc1  = 1;        % First Cutoff Frequency
Fc2  = 4;        % Second Cutoff Frequency
flag = 'scale';  % Sampling Flag
% Create the window vector for the design algorithm.
win = hamming(N+1);

% Calculate the coefficients using the FIR1 function.
b  = fir1(N, [Fc1 Fc2]/(Fs/2), 'bandpass', win, flag);
Hd = dfilt.dffir(b);

% [EOF]

function Hd = theta_filter
%THETA_FILTER Returns a discrete-Time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.13 and DSP System Toolbox 9.15.
% Generated on: 29-Mar-2023 14:08:06

% FIR Window Bandpass filter designed using the FIR1 function.

% All frequency values are in Hz.
Fs = 200;  % Sampling Frequency

N    = 800;      % Order
Fc1  = 4;        % First Cutoff Frequency
Fc2  = 8;        % Second Cutoff Frequency
flag = 'scale';  % Sampling Flag
% Create the window vector for the design algorithm.
win = hamming(N+1);

% Calculate the coefficients using the FIR1 function.
b  = fir1(N, [Fc1 Fc2]/(Fs/2), 'bandpass', win, flag);
Hd = dfilt.dffir(b);

% [EOF]

